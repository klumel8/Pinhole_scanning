function sphere_area = circle_area3(hit_pin_xyz, grid_col, grid_row)
    close all
    drie_dim = max(size(hit_pin_xyz,3),1);
    bruf = 0;
    O_theta = zeros(size(hit_pin_xyz,2)-1,size(hit_pin_xyz,3));
    O_phi   = O_theta;
    for dm=1:drie_dim
        %we nemen de unitsphere als een bol met straal 1mm.
        %en xyz ook in mm. de eerste colom van hit_pin bevat allen de xyz van de geraakte voxel

        %determine the xyz coordinates of the voxel being hit (first colomn of
        %the pinhole list)
        v = hit_pin_xyz(1:3,1,1);
        %remove the voxel coordinates column from the matrix.
        hit_pin = hit_pin_xyz(:,2:end,:);
        sz = size(hit_pin,2);
        for i=1:sz
            hit_pin(1:3,i,dm) = -(hit_pin(1:3,i,dm) - v(1:3)); 
        end

        %###########belangrijk het is continu, ds verdoe je tijd niet aan ons
        %controleren!


        %here we calculate phi and theta note, phi is the angle with (x,y)
        phiC = atan2(hit_pin(2,:,dm), hit_pin(1,:,dm))+pi;
        %phi = phi .* (phi >= 0) + (phi + 2 * pi) .* (phi < 0); 
        thetaC = abs(atan( hit_pin(3,:,dm) ./ sqrt( hit_pin(1,:,dm).^2 + hit_pin(2,:,dm).^2))-pi/2);
        O_phi(:,dm) = phiC;
        O_theta(:,dm) = thetaC;

        %now we want to calculate the area on the circle, we do this by
        %calculating the borders. we take 12 as a estimate to make sure we hit
        %all the grids.
        %determine the angles of the surface vector
        pin_phi = hit_pin(4,:,dm)';
        pin_theta = hit_pin(5,:,dm)';
        r_pin = hit_pin(6,:,dm)';
        lengte = sqrt([hit_pin(1,:,dm)'.^2 + hit_pin(2,:,dm)'.^2 + hit_pin(3,:,dm)'.^2]);
        mess1 = -1.*[hit_pin(1,:,dm)'./lengte , hit_pin(2,:,dm)'./lengte, hit_pin(3,:,dm)'./lengte];
        mess2 = [cos(pin_phi).*sin(pin_theta), sin(pin_phi).*sin(pin_theta), cos(pin_theta)]; 
        angle = acos((mess1(:,1).*mess2(:,1)+mess1(:,2).*mess2(:,2)+mess1(:,3).*mess2(:,3)));
        r_pin =(r_pin.*abs(sin(pi/2 - angle))./(lengte + r_pin.*abs(cos(pi/2-angle))));
        r_pin = r_pin';
        r_pin = atan(r_pin);

        %maak het aantal stappen moet overlegd worden
        steps = 1000;
        h_step = round(steps/2);
        gamma = linspace(0, 2*pi, h_step);

        %begin making the area that is been seen by  the pinhole
        area_border = zeros(h_step, sz, 2); %steps
        [Phi,Gamma] = meshgrid(phiC,gamma);
        [Theta,~] = meshgrid(thetaC,gamma);
        [R_pin,~] = meshgrid(r_pin,gamma);

        Phim = Phi-pi;
        Thetam = -(Theta + pi/2);
        pos = ones(h_step,sz,3,drie_dim);
        pos(1:h_step,:,1,dm) = R_pin.*((cos(Gamma).*sin(Thetam).*cos(Phim)-sin(Gamma).*sin(Phim)));
        pos(1:h_step,:,2,dm) = R_pin.*(cos(Gamma).*sin(Thetam).*sin(Phim)+sin(Gamma).*cos(Phim));
        pos(1:h_step,:,3,dm) = R_pin.*cos(Gamma).*cos(Thetam);
        

        pos(1:h_step,:,1,dm) = pos(1:h_step,:,1,dm)+cos(Phi).*sin(Theta);                      
        pos(1:h_step,:,2,dm) = pos(1:h_step,:,2,dm)+sin(Phi).*sin(Theta);
        pos(1:h_step,:,3,dm) = pos(1:h_step,:,3,dm)+cos(Theta);

        %plot3(pos(1:h_step,:,1),pos(1:h_step,:,2),pos(1:h_step,3));

        area_border(:,:,2) = atan2(pos(:,:,2,dm), pos(:,:,1,dm))+ pi;
        %phi = phi .* (phi >= 0) + (phi + 2 * pi) .* (phi < 0); 
        area_border(:,:,1) = abs(atan( pos(:,:,3,dm) ./ sqrt( pos(:,:,1,dm).^2 + pos(:,:,2,dm).^2))-pi/2);
        if sum(bruf(:))>0
            bruf = cat(4,area_border,bruf);
        else
            bruf = area_border;
        end
    end
    %afstanden = squeeze(sqrt((bruf(:,:,2,2:end) - bruf(:,:,2,1:end-1)).^2 +...
    %(bruf(:,:,1,2:end) - bruf(:,:,1,1:end-1)).^2));
    afstand(:,:,1) = squeeze(O_theta(:,2:end) - O_theta(:,1:end-1));
    afstand(:,:,2) = squeeze(O_phi(:,2:end) - O_phi(:,1:end-1));
    fst = sqrt(afstand(:,:,1).^2 + afstand(:,:,2).^2);
    %maxPhi = max(abs(area_border(:,:,2)-O_theta(:,1:end)))
    %maxTheta = max(abs(area_border(:,:,1)-O_phi(:,1:end)))
    hoeken = atan2(afstand(:,:,1),afstand(:,:,2));
    vars = sin(hoeken).*fst - afstand(:,:,1);
    chi(:,:,1) = hoeken + pi/2;
    chi(:,:,2) = hoeken - pi/2;
    chi = mod(chi,2*pi);
    chi = round(chi / (2*pi) * h_step);
    Ophi = zeros(size(O_phi,1),size(O_phi,2)-1,2,2);
    Otheta = zeros(size(O_phi,1),size(O_phi,2)-1,2,2);
    average_t = permute(repmat(squeeze(mean(bruf(:,:,1,:))),[1 1 500]),[3 1 2]);
    average_p = permute(repmat(squeeze(mean(bruf(:,:,2,:))),[1 1 500]),[3 1 2]);
    a_t = max(squeeze(bruf(:,:,1,:)) - average_t);
    a_p = max(squeeze(bruf(:,:,2,:)) - average_p);
    for a=1:size(O_phi,1)
        for b=1:size(O_phi,2)-1
            Ophi(a,b,1,:) = [bruf(chi(a,b,1),a,2,b) bruf(chi(a,b,1),a,2,b+1)];
            Ophi(a,b,2,:) = [bruf(chi(a,b,2),a,2,b) bruf(chi(a,b,2),a,2,b+1)];
            Otheta(a,b,1,:) = [bruf(chi(a,b,1),a,1,b) bruf(chi(a,b,1),a,1,b+1)];
            Otheta(a,b,2,:) = [bruf(chi(a,b,2),a,1,b) bruf(chi(a,b,2),a,1,b+1)];
        end
    end
    range(:,:,1) = squeeze(Otheta(:,:,1,2) - Otheta(:,:,1,1));
    range(:,:,2) = squeeze(Ophi(:,:,1,2) - Ophi(:,:,1,1));
    %range(:,:,3) = squeeze(Otheta(:,2:end,2) - Otheta(:,1:end-1,2));
    %range(:,:,4) = squeeze(Ophi(:,2:end,2) - Otheta(:,1:end-1,2));
    afstand(:,:,2) = squeeze(O_phi(:,2:end) - O_phi(:,1:end-1));
    afstand(:,:,1) = (abs(afstand(:,:,1)) < 5).*afstand(:,:,1);
    afstand(:,:,2) = (abs(afstand(:,:,2)) < 5).*afstand(:,:,2);
    
    
    %m_h = squeeze(mean(hoeken));
    s = 200;
    lines = zeros(size(O_phi,1),size(O_phi,2),2,s);
    for a=1:size(Ophi,1)
         for b=1:size(Ophi,2)
             lines(a,b,1,:) = Otheta(a,b,1,1) + linspace(0,range(a,b,1),s);
             lines(a,b,2,:) = Ophi(a,b,1,1) + linspace(0,range(a,b,2),s);
         end
     end
    
    
    %{
    for i=1:sz
        for j=1:steps
            area_border(i,j,:) = [(phi(i) + cos(gamma(j)).*r_pin(i)) (theta(i) + sin(gamma(j)).*r_pin(i))];
        end
    end
    area_border - area_border1
    %}
    
    %begin making a grid area of the area border.
    
    %row = niet x2
    %grid phi = row
    figure
    %plot(area_border(1:h_step,:,2),area_border(1:h_step,:,1),'.');
    
    %{
    hold on;
    for i=1:sz
        plot(area_border(:,i,2),area_border(:,i,1));
        xlabel('phi')
        ylabel('theta')
    end
    axis([0 2*pi 0 pi]);
    grid on;
    %}
    
    %now make the border area into a grid matrix;
    border_grid = false(grid_row,grid_col);
    for dm=1:drie_dim
        for i=1:1%sz
            for j=1:h_step %steps
                r_phi = floor(abs(bruf(j,i,2,dm)/2/pi*grid_col) + 1);
                r_theta = floor(abs(bruf(j,i,1,dm)/pi*grid_row) + 1);
                r_phi = r_phi + (r_phi < 0)*grid_col - (r_phi > grid_col)*grid_col;
                r_theta = r_theta + (r_theta < 0) * grid_row - (r_theta > grid_row)*grid_row;
                border_grid(r_theta,r_phi) = true;
            end
        end
    end
    for a=1:1%size(O_phi,1)
        for b=1:size(O_phi,2)
            for c=1:s
                p_phi = floor(abs((lines(a,b,2,c))/2/pi*grid_col) + 1);
                p_theta = floor(abs(lines(a,b,1,c)/pi*grid_row) + 1);
                p_phi = p_phi + (p_phi < 0)*grid_col - (p_phi > grid_col)*grid_col;
                p_theta = p_theta + (p_theta < 0) * grid_row - (p_theta > grid_row)*grid_row;
                border_grid(p_theta,p_phi) = true;
            end
        end
    end
%     for a=1:size(O_phi,1)
%         for b=1:size(O_phi,2)-1 %
%             for c=1:s
%                 r_phi = floor(abs(bruf(j,i,2,dm)/2/pi*grid_col) + 1);
%                 r_theta = floor(abs(bruf(j,i,1,dm)/pi*grid_row) + 1);
%                 r_phi = r_phi + (r_phi < 0)*grid_col - (r_phi > grid_col)*grid_col;
%                 r_theta = r_theta + (r_theta < 0) * grid_row - (r_theta > grid_row)*grid_row;
%                 
%                 border_grid(a,b) = true;
%             end
%         end
%     end
    sphere_area = border_grid(1:grid_row,1:grid_col);
    colormap('gray');
    imagesc(border_grid);
    hold on
    
end
